import pandas as pd
import pytest
import datetime


@pytest.fixture
def get_data_for_services():
    """Фикстура возвращает DataFrame с транзакциями"""
    return [
        {
            "Дата операции": "31.12.2021 16:44:00",
            "Дата платежа": "31.12.2021",
            "Номер карты": "*7197",
            "Статус": "OK",
            "Сумма операции": "-160,89",
            "Валюта операции": "RUB",
            "Сумма платежа": "-160,89",
            "Валюта платежа": "RUB",
            "Кэшбэк": 0,
            "Категория": "Супермаркеты",
            "MCC": 5411,
            "Описание": "Колхоз",
            "Бонусы (включая кэшбэк)": 3.00,
            "Округление на инвесткопилку": 0.0,
            "Сумма операции с округлением": 160.89
        },
        {
            "Дата операции": "31.12.2021 16:44:00",
            "Дата платежа": "31.12.2021",
            "Номер карты": "*7197",
            "Статус": "OK",
            "Сумма операции": "-160,89",
            "Валюта операции": "RUB",
            "Сумма платежа": "-160,89",
            "Валюта платежа": "RUB",
            "Кэшбэк": 0,
            "Категория": "Супермаркеты",
            "MCC": 5411,
            "Описание": "Магнит",
            "Бонусы (включая кэшбэк)": 3.00,
            "Округление на инвесткопилку": 0.0,
            "Сумма операции с округлением": 160.89
        },
        {
            "Дата операции": "31.12.2021 16:44:00",
            "Дата платежа": "31.12.2021",
            "Номер карты": "*7197",
            "Статус": "OK",
            "Сумма операции": "-160,89",
            "Валюта операции": "RUB",
            "Сумма платежа": "-160,89",
            "Валюта платежа": "RUB",
            "Кэшбэк": 0,
            "Категория": "Различные товары",
            "MCC": 5411,
            "Описание": "Магнит",
            "Бонусы (включая кэшбэк)": 3.00,
            "Округление на инвесткопилку": 0.0,
            "Сумма операции с округлением": 160.89
        },
        {
            "Дата операции": "31.12.2021 16:44:00",
            "Дата платежа": "31.12.2021",
            "Номер карты": "*7197",
            "Статус": "OK",
            "Сумма операции": "-160,89",
            "Валюта операции": "RUB",
            "Сумма платежа": "-160,89",
            "Валюта платежа": "RUB",
            "Кэшбэк": 70,
            "Категория": "Ж/д билеты",
            "MCC": 5411,
            "Описание": "РЖД",
            "Бонусы (включая кэшбэк)": 3.00,
            "Округление на инвесткопилку": 0.0,
            "Сумма операции с округлением": 160.89
        }
    ]


@pytest.fixture
def get_data_for_reports():
    """Фикстура возвращает DataFrame с транзакциями"""
    return pd.DataFrame(
        [
            {
                "Дата операции": "31.12.2020 16:44:00",
                "Дата платежа": "31.12.2021",
                "Номер карты": "*7197",
                "Статус": "OK",
                "Сумма операции": "-160,89",
                "Валюта операции": "RUB",
                "Сумма платежа": "-160,89",
                "Валюта платежа": "RUB",
                "Кэшбэк": 0,
                "Категория": "Супермаркеты",
                "MCC": 5411,
                "Описание": "Колхоз",
                "Бонусы (включая кэшбэк)": 3.00,
                "Округление на инвесткопилку": 0.0,
                "Сумма операции с округлением": 160.89
            },
            {
                "Дата операции": "28.12.2021 16:44:00",
                "Дата платежа": "31.12.2021",
                "Номер карты": "*7197",
                "Статус": "OK",
                "Сумма операции": "-160,89",
                "Валюта операции": "RUB",
                "Сумма платежа": "-160,89",
                "Валюта платежа": "RUB",
                "Кэшбэк": 0,
                "Категория": "Супермаркеты",
                "MCC": 5411,
                "Описание": "Магнит",
                "Бонусы (включая кэшбэк)": 3.00,
                "Округление на инвесткопилку": 0.0,
                "Сумма операции с округлением": 160.89
            },
            {
                "Дата операции": "31.12.2021 16:44:00",
                "Дата платежа": "31.12.2021",
                "Номер карты": "*7197",
                "Статус": "OK",
                "Сумма операции": "-160,89",
                "Валюта операции": "RUB",
                "Сумма платежа": "-160,89",
                "Валюта платежа": "RUB",
                "Кэшбэк": 0,
                "Категория": "Супермаркеты",
                "MCC": 5411,
                "Описание": "Магнит",
                "Бонусы (включая кэшбэк)": 3.00,
                "Округление на инвесткопилку": 0.0,
                "Сумма операции с округлением": 160.89
            },
            {
                "Дата операции": "30.12.2021 16:44:00",
                "Дата платежа": "31.12.2021",
                "Номер карты": "*7197",
                "Статус": "OK",
                "Сумма операции": "-160,89",
                "Валюта операции": "RUB",
                "Сумма платежа": "-160,89",
                "Валюта платежа": "RUB",
                "Кэшбэк": 70,
                "Категория": "Ж/д билеты",
                "MCC": 5411,
                "Описание": "РЖД",
                "Бонусы (включая кэшбэк)": 3.00,
                "Округление на инвесткопилку": 0.0,
                "Сумма операции с округлением": 160.89
            }
        ]
    )


@pytest.fixture
def get_now_data_for_reports():
    """Фикстура возвращает операции с текущими датами и текущую дату"""
    date_in_operation = datetime.datetime.now()
    date_in_operation_str = date_in_operation.strftime('%d.%m.%Y %H:%M:%S')

    date_in_arg = datetime.datetime.now()

    return date_in_arg, pd.DataFrame(
        [
            {
                "Дата операции": date_in_operation_str,
                "Дата платежа": "31.12.2021",
                "Номер карты": "*7197",
                "Статус": "OK",
                "Сумма операции": "-160,89",
                "Валюта операции": "RUB",
                "Сумма платежа": "-160,89",
                "Валюта платежа": "RUB",
                "Кэшбэк": 0,
                "Категория": "Супермаркеты",
                "MCC": 5411,
                "Описание": "Магнит",
                "Бонусы (включая кэшбэк)": 3.00,
                "Округление на инвесткопилку": 0.0,
                "Сумма операции с округлением": 160.89
            },
            {
                "Дата операции": "31.12.2021 16:44:00",
                "Дата платежа": "31.12.2021",
                "Номер карты": "*7197",
                "Статус": "OK",
                "Сумма операции": "-160,89",
                "Валюта операции": "RUB",
                "Сумма платежа": "-160,89",
                "Валюта платежа": "RUB",
                "Кэшбэк": 0,
                "Категория": "Супермаркеты",
                "MCC": 5411,
                "Описание": "Магнит",
                "Бонусы (включая кэшбэк)": 3.00,
                "Округление на инвесткопилку": 0.0,
                "Сумма операции с округлением": 160.89
            }
        ]
    )


@pytest.fixture
def get_data_for_get_expenses():
    """Фикстура возвращает операции для расходов, пополнений и наличных"""
    return pd.DataFrame(
        [
            {
                "Дата операции": "31.12.2021 16:44:00",
                "Сумма операции": -160.00,
                "Категория": "Супермаркеты",
                "Описание": "Магнит",
                "Сумма операции с округлением": 160.89
            },
            {
                "Дата операции": "28.12.2021 16:44:00",
                "Сумма операции": -200.00,
                "Категория": "Супермаркеты",
                "Описание": "Магнит",
                "Сумма операции с округлением": 200.01
            },
            {
                "Дата операции": "29.12.2021 16:44:00",
                "Сумма операции": -320.00,
                "Категория": "Супермаркеты",
                "Описание": "Магнит",
                "Сумма операции с округлением": 320.11
            },
            {
                "Дата операции": "29.12.2021 16:44:00",
                "Сумма операции": -150.00,
                "Категория": "Различные товары",
                "Описание": "Ozon.ru",
                "Сумма операции с округлением": 150.11
            },
            {
                "Дата операции": "29.12.2021 16:44:00",
                "Сумма операции": -170.00,
                "Категория": "Каршеринг",
                "Описание": "Ситидрайв",
                "Сумма операции с округлением": 170.11
            },
            {
                "Дата операции": "29.12.2021 16:44:00",
                "Сумма операции": -330.00,
                "Категория": "Ж/д билеты",
                "Описание": "РЖД",
                "Сумма операции с округлением": 330.11
            },
            {
                "Дата операции": "29.12.2021 16:44:00",
                "Сумма операции": -296.00,
                "Категория": "Фастфуд",
                "Описание": "Mouse Tail",
                "Сумма операции с округлением": 296.11
            },
            {
                "Дата операции": "29.12.2021 16:44:00",
                "Сумма операции": -3250.00,
                "Категория": "Дом и ремонт",
                "Описание": "Леруа Мерлен",
                "Сумма операции с округлением": 3250.11
            },
            {
                "Дата операции": "29.12.2021 16:44:00",
                "Сумма операции": -140.00,
                "Категория": "Аптеки",
                "Описание": "Классика",
                "Сумма операции с округлением": 140.11
            },
            {
                "Дата операции": "29.12.2021 16:44:00",
                "Сумма операции": -225.00,
                "Категория": "Связь",
                "Описание": "МТС ",
                "Сумма операции с округлением": 225.11
            },
            {
                "Дата операции": "29.12.2021 16:44:00",
                "Сумма операции": -120.00,
                "Категория": "Цветы",
                "Описание": "FanFan Tulpan",
                "Сумма операции с округлением": 120.02
            },
            {
                "Дата операции": "29.12.2021 16:44:00",
                "Сумма операции": -3000.00,
                "Категория": "Наличные",
                "Описание": "Снятие в банкомате Тинькофф",
                "Сумма операции с округлением": 3000.00
            },
            {
                "Дата операции": "29.12.2021 16:44:00",
                "Сумма операции": -5000.00,
                "Категория": "Наличные",
                "Описание": "Снятие в банкомате Тинькофф",
                "Сумма операции с округлением": 5000.00
            },
            {
                "Дата операции": "29.12.2021 16:44:00",
                "Сумма операции": -250.00,
                "Категория": "Переводы",
                "Описание": "Константин Л.",
                "Сумма операции с округлением": 250.05
            },
            {
                "Дата операции": "29.12.2021 16:44:00",
                "Сумма операции": -3000.00,
                "Категория": "Переводы",
                "Описание": "Константин Л.",
                "Сумма операции с округлением": 3000.00
            }
        ]
    )


@pytest.fixture
def get_data_for_get_income():
    """Фикстура возвращает операции для поступлений"""
    return pd.DataFrame(
        [
            {
                "Дата операции": "29.12.2021 16:44:00",
                "Категория": "Пополнения",
                "Описание": "Пополнение через Газпромбанк",
                "Сумма операции с округлением": 3000.00
            },
            {
                "Дата операции": "30.12.2021 16:44:00",
                "Категория": "Пополнения",
                "Описание": "Пополнение через Газпромбанк",
                "Сумма операции с округлением": 5000.00
            },
            {
                "Дата операции": "29.12.2021 16:44:00",
                "Категория": "Пополнения",
                "Описание": "Пополнение через Сбер",
                "Сумма операции с округлением": 200.01
            },
            {
                "Дата операции": "30.12.2021 16:44:00",
                "Категория": "Пополнения",
                "Описание": "Пополнение через Сбер",
                "Сумма операции с округлением": 1000.00
            }
        ]
    )


@pytest.fixture
def get_currency_response_for_get_currency_rates():
    """Фикстура возвращает ответ от currency_data-api"""
    return [
        {
            'success': True,
            'change': True,
            'start_date': '2025-07-07',
            'end_date': '2025-07-07',
            'source': 'USD',
            'quotes': {
                'USDRUB': {
                    'start_rate': 78.918179,
                    'end_rate': 78.918179,
                    'change': 0,
                    'change_pct': 0
                }
            }
        },
        {
            'success': True,
            'change': True,
            'start_date': '2025-07-07',
            'end_date': '2025-07-07',
            'source': 'EUR',
            'quotes': {
                'EURRUB': {
                    'start_rate': 90.000,
                    'end_rate': 90.000,
                    'change': 0,
                    'change_pct': 0
                }
            }
        }
    ]


@pytest.fixture
def get_data_for_get_stock_prices():
    """Фикстура возвращает ответ от marketstack-api"""
    return {
        'pagination': {
            'limit': 100,
            'offset': 0,
            'count': 2,
            'total': 2
        },
        'data': [
            {
                'open': 212.145,
                'high': 214.65,
                'low': 211.8101,
                'close': 213.55,
                'volume': 34955836.0,
                'adj_high': 214.65,
                'adj_low': 211.8101,
                'adj_close': 213.55,
                'adj_open': 212.145,
                'adj_volume': 34955836.0,
                'split_factor': 1.0,
                'dividend': 0.0,
                'symbol': 'AAPL',
                'exchange':
                    'XNAS',
                'date': '2025-07-03T00:00:00+0000'
            },
            {
                'open': 212.145,
                'high': 214.65,
                'low': 211.8101,
                'close': 320.55,
                'volume': 34955836.0,
                'adj_high': 214.65,
                'adj_low': 211.8101,
                'adj_close': 213.55,
                'adj_open': 212.145,
                'adj_volume': 34955836.0,
                'split_factor': 1.0,
                'dividend': 0.0,
                'symbol': 'AMZN',
                'exchange':
                    'XNAS',
                'date': '2025-07-03T00:00:00+0000'
            }
        ]
    }


@pytest.fixture
def result_inner_functions_for_get_events():
    """Фикстура возвращает результат внутренних функций"""
    return {
        "get_expenses": '{"expenses": {"total_amount": 11250,"main": [],"transfers_and_cash": [{"category": "Наличные","amount": 8000},{"category": "Переводы","amount": 3250}]}}',
        "get_income": '{"income": {"total_amount": 9200,"main": [{"category": "Пополнение через Газпромбанк","amount": 8000},{"category": "Пополнение через Сбер","amount": 1200}]}}',
        "get_currency_rates": '{"currency_rates": [{"currency": "USD","rate": 78.918179},{"currency": "EUR","rate": 90.000}]}',
        "get_stock_prices": '{"stock_prices": [{"stock": "AAPL","price": 213.55},{"stock": "AMZN","price": 320.55}]}',
    }
